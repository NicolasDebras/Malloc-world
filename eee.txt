Object* initTestInventory1(){
    Object* inventory = new_Object();

    inventory->type = ARME_TYPE;
    inventory->arme = getDBArme(WOOD_SWORD);
    inventory->isSelected = SELECTED;

    inventory->next = new_Object();
    inventory->next->type = OUTIL_TYPE;
    inventory->next->category = AX_CATEGORY;
    inventory->next->outil = getDBOutils(IRON_AX);

    return inventory;
}

Object* initTestInventory2(){
    Object* inventory = new_Object();
    inventory->type = ARME_TYPE;
    inventory->arme = getDBArme(WOOD_SWORD);

    inventory->next = new_Object();
    inventory->next->type = ARME_TYPE;
    inventory->next->arme = getDBArme(IRON_SWORD);

    inventory->next->next = new_Object();
    inventory->next->next->type = RDC_TYPE;
    inventory->next->next->ressource_de_craft = getDBRDC(LAVENDER);

    return inventory;
}

Object* initTestInventory3(){
    Object* inventory = new_Object();
    inventory->type = ARME_TYPE;
    inventory->arme = getDBArme(WOOD_SWORD);

    inventory->next = new_Object();
    inventory->next->type = ARMURE_TYPE;
    inventory->next->armure = getDBArmure(IRON_CHESTPLATE);

    inventory->next->next = new_Object();
    inventory->next->next->type = RDC_TYPE;
    inventory->next->next->ressource_de_craft = getDBRDC(LAVENDER);
    inventory->next->next->ressource_de_craft->quantity = 3;

    return inventory;
}

Object* initTestInventory4(){
    Object* inventory = new_Object();
    inventory->type = ARME_TYPE;
    inventory->arme = getDBArme(WOOD_SWORD);

    inventory->next = new_Object();
    inventory->next->type = OUTIL_TYPE;
    inventory->next->outil = getDBOutils(IRON_AX);

    inventory->next->next = new_Object();
    inventory->next->next->type = RDC_TYPE;
    inventory->next->next->ressource_de_craft = getDBRDC(FIR);
    inventory->next->next->ressource_de_craft->quantity = 7;

    inventory->next->next->next = new_Object();
    inventory->next->next->next->type = RDC_TYPE;
    inventory->next->next->next->ressource_de_craft = getDBRDC(STONE);
    inventory->next->next->next->ressource_de_craft->quantity = 13;

    return inventory;
}

Player* initTestPlayer1(){
    Player* p = malloc(sizeof(Player));

    p->xp = 0;
    p->level = 1;
    p->hp_current = 70;
    p->hp_max = 100;
    p->inventory = malloc(sizeof(Object));
    p->inventory->soin = getDBSoin(HEAL2);
    p->inventory->type = SOIN_TYPE;
    p->inventory->next = NULL;
    return p;
}

void initTestPrintInventory(){
    printf("Armor n°22 Resistance: 20\n");
    printf("Ressource n°17 quantity: 3\n");
}

void freeObject(Object* object){
    free(object->arme);
    free(object->armure);
    free(object->next);
    free(object->outil);
    free(object->ressource_de_craft);
    free(object->soin);
    free(object);
}

void testPrintPlayer(){
    printf("----*Player Descriptions*----\n");
    printf("-- XP: 0\n");
    printf("-- Level: 1\n");
    printf("-- HP_CURRENT: 100\n");
    printf("-- HP_MAX: 100\n");
    printf("----*----*----*----*----*----\n\n");
}

////////////////////////////////////////////////

//---------// Add object in Inventory //---------// 

Object* addarme(Object* inventory, int type, int objectId){
    int nb_weapon = countInventoryArme(inventory);
    int our_weapon = isArmeInInventory(inventory,type,objectId);
    int size = inventorySize(inventory);
    Object* tmp = inventory;
    if ( size < 11 && nb_weapon <= 3 && our_weapon!=1){
        if ( inventory->type == -1 ){

            inventory = getDBObject(type, objectId);

            printf("Object n°%d was added to your inventory\n",inventory->arme->objectId);
            
            return inventory;
        }
        else{
            while(tmp->next != NULL) {
                tmp = tmp->next;
            }
            tmp->next = getDBObject(type, objectId);
            printf("Object n°%d was added to your inventory\n",tmp->next->arme->objectId);    
        }
    }
    else{
        printf("***addarme Exception: We cannot insert more weapon!\n");
        printf("***addarme Exception: There is %d objets in inventory and %d Weapons\n",size, nb_weapon);
    }

    return inventory;
}

Object* addcraft(Object* inventory,int type, int objectId){
    int size = inventorySize(inventory);
    printf("on a %d size.\n", size);

    if ( size < 11 ){

        if ( inventory->type == -1){
            inventory = quantityRDCInc(inventory, type, objectId);
            return inventory;
        }
        inventory = quantityRDCInc(inventory, type, objectId);

        return inventory;
    }
    else{
        printf("***addcraft Exception: We cannot insert more ressources!\n");
        printf("***addcraft Exception: There is %d objets in inventory.\n",size);
        return inventory;
    }
}

Object* addOtherObject(Object* inventory, int type, int objectId){

    int size = inventorySize(inventory);
    Object* tmp = inventory;
    printf("on a %d size.\n", size);
    if ( size < 11 ){

        if ( inventory->type == -1 ){
            inventory = getDBObject(type, objectId);

            printf("Object n°%d was added to your inventory\n",objectId);

            return inventory;
        }
        while(tmp->next != NULL) {
            tmp = tmp->next;
        }
        tmp->next = getDBObject(type, objectId);
        printf("Object n°%d was added to your inventory\n",objectId);

    }
    else{
        printf("***addOtherObject Exception: We cannot insert more weapon !\n");
        printf("***addOtherObject Exception: There is %d objets in inventory\n",size);
    }

    return inventory;
}

Object* appendNewObject(Object* inventory, int objectId, int objectType){
    switch (objectType)
    {
        case ARME_TYPE:
            inventory = addarme(inventory, objectType, objectId);
            break;
        case RDC_TYPE:
            inventory = addcraft(inventory, objectType, objectId);
            break;
        default:
            inventory = addOtherObject(inventory, objectType, objectId);
            break;
    }
    return inventory;
}

//////////////////////////////////////////////



Weapon    n°19 Durability: 10 Damage: 5  IsSelected: 0
Armor     n°11 Resistance: 10
Ressource n°5  Quantity:   3
Ressource n°16 Quantity:   2
Ressource n°17 Quantity:   4
Tool      n°23 Durability: 10
Tool      n°3  Durability: 10
Tool      n°4  Durability: 10
Potion    n°15 Hp_heal:    30


TYPE         CATEGORY         IS_SELECTED   OBJECT_ID  CAPACITY DAMAGE